
# Summarization Prompts
summarization.short_intro:
  inline: "Summarize this into one sentence: {content}"
  used_by: tasks.sql_explainer.SQLExplainer
  inputs: [content]
  version: 1.0
  description: Short one-sentence summarization.

# SQL Test Generator Prompts
test_generator.unit_tests:
  inline: |
    "Given the SQL query below, generate relevant unit tests or test scenarios. 
    For each scenario, describe input data requirements and expected output or behavior. 
    Include edge cases, null handling, empty results, and permission boundaries.\n\n{sql_query}"
  used_by: tasks.sql_test_generator.SQLTestGenerator
  inputs: [sql_query]
  version: 1.0
  description: Generate unit tests for SQL queries.

# SQL Analyzer Prompts
analyzer.performance_analysis:
  inline: |
    "Analyze the following SQL query for potential performance improvements. 
    Identify anti-patterns, missing indexes, excessive joins, and suggest refactoring. 
    Use SQL best practices. Avoid SELECT * if found. Recommend using CTEs or window functions if relevant.\n\n{sql_query}"
  used_by: tasks.sql_analyzer.SQLAnalyzer
  inputs: [sql_query]
  version: 1.0
  description: Analyze SQL queries for performance improvements.

# SQL Commenter Prompts
commenter.add_comments:
  inline: |
    "You are a T-SQL expert. Given the SQL code below, please:
    1. Prepend a comment header block with:
       -- =============================================
       -- Author:      {user}
       -- Create date: {timestamp}
       -- Description: <Provide a detailed overview of this query>
       -- =============================================

    2. Add or improve inline comments throughout the query.
    3. Only return the updated SQL code with no markdown formatting.

    SQL Code:
    {sql_query}"
  used_by: tasks.sql_commenter.SQLCommenter
  inputs: [sql_query, user, timestamp]
  version: 1.0
  description: Add comments and metadata headers to SQL queries.

# SQL Explainer Prompts
explainer.step_by_step:
  inline: |
    "Explain the following SQL query step-by-step in simple, human-readable language. 
    Cover what each clause (SELECT, WHERE, JOIN, etc.) is doing. 
    If there are subqueries, CTEs, or window functions, explain those as well. 
    Only return the explanation in plain text.\n\n{sql_query}"
  used_by: tasks.sql_explainer.SQLExplainer
  inputs: [sql_query]
  version: 1.0
  description: Provide a step-by-step explanation of SQL queries.

# SQL Refactorer Prompts
refactorer.improve_modularity:
  inline: |
    "Refactor the following SQL query to improve modularity, readability, and maintainability. 
    Use Common Table Expressions (CTEs), views, and clean formatting. 
    Avoid using SELECT * and suggest clear aliases. 
    Only return the cleaned, refactored SQL without markdown formatting.\n\n{sql_query}"
  used_by: tasks.sql_refactorer.SQLRefactorer
  inputs: [sql_query]
  version: 1.0
  description: Refactor SQL queries for better readability and maintainability.

# SQL Security Auditor Prompts
auditor.security_audit:
  inline: |
    "Perform a security audit on the following SQL query. 

    Identify any of the following:
    - SQL Injection vulnerabilities
    - Improper data exposure (especially PHI/PII)
    - Absence of access controls
    - Unsafe use of dynamic SQL
    - HIPAA or HITECH compliance risks

    Provide a list of findings with recommendations.

    SQL Code:
    {sql_query}"
  used_by: tasks.sql_security_auditor.SQLSecurityAuditor
  inputs: [sql_query]
  version: 1.0
  description: Audit SQL queries for security vulnerabilities and compliance risks.

# SQL Performance Benchmaring and Optimization Prompts
performance_benchmark.simulate:
  inline: |
    "You are a database performance optimization expert. Analyze the SQL query below and:
    1. Estimate its execution time and resource usage.
    2. Identify potential performance bottlenecks.
    3. Suggest indexing, partitioning, or query tuning strategies to improve performance.

    SQL Query:
    {sql_query}"
  used_by: tasks.sql_performance_benchmark.SQLPerformanceBenchmark
  inputs:
    - sql_query
  version: 1.0
  description: Simulates query execution and provides performance metrics.

# SQL Query Validator Prompts
query_validator.simulate_and_validate:
  inline: |
    "You are a database expert. Simulate the execution of the SQL query below and:
    1. Identify syntax errors and suggest corrections if any.
    2. Validate the logical correctness of the query (e.g., ambiguous joins, unused clauses).
    3. Provide feedback on potential risks (e.g., missing WHERE conditions for updates or deletions).

    SQL Query:
    {sql_query}"
  used_by: tasks.sql_query_validator.SQLQueryValidator
  inputs: [sql_query]
  version: 1.0
  description: Simulates and validates SQL queries for syntax and logical correctness.

# Enhanced Security Audit Prompts
security_audit.enhanced:
  inline: |
    "You are a database security expert. Perform a comprehensive security audit on the SQL query below. Specifically:
    1. Detect common vulnerabilities, including:
       - SQL Injection risks.
       - Unsafe use of dynamic SQL.
       - Improper data exposure (e.g., PHI/PII like SSNs, passwords).
       - Absence of access controls.
    2. Identify any HIPAA or HITECH compliance risks.
    3. Classify detected vulnerabilities by severity (Critical, High, Medium, Low).
    4. Provide actionable recommendations to address identified issues.

    SQL Query:
    {sql_query}"
  used_by: tasks.sql_security_auditor.EnhancedSQLSecurityAuditor
  inputs: [sql_query]
  version: 1.0
  description: Audits SQL queries for security vulnerabilities, compliance risks, and provides remediation steps.

# Natural Language to SQL Conversion Prompts
nl_to_sql.convert:
  inline: |
    "You are an expert database administrator. Convert the following natural language query into a valid SQL query:
    - SQL Dialect: {sql_dialect}
    - Schema: {schema}

    Natural Language Query:
    {nl_query}

    Provide the SQL query as output."
  used_by: tasks.natural_language_to_sql.NaturalLanguageToSQL
  inputs: [nl_query, sql_dialect, schema]
  version: 1.2
  description: Converts natural language queries to SQL queries using a predefined schema JSON.

# SQL Style Enforcer Prompts
style_enforcer.enforce_style:
  inline: |
    You are an expert in SQL coding standards. Below is a SQL query. Please:
    1. Enforce naming conventions for tables, columns, and indexes (e.g., snake_case for table and column names, idx_ prefix for indexes).
    2. Format the SQL code following best practices:
       - Keywords in uppercase.
       - Indentation with 4 spaces.
       - Line length not exceeding 80 characters.
    3. Return the updated SQL code with no additional comments or explanations.

    SQL Dialect: {sql_dialect}
    SQL Code:
    {sql_code}
  used_by: tasks.sql_style_enforcer.SQLStyleEnforcer
  inputs:
    - sql_code
    - sql_dialect
  version: 1.0
  description: Enforces SQL coding standards dynamically using AI.

# SQL Data Masking Prompts
data_masker.mask_sensitive_data:
  inline: |
    You are a data anonymization expert. Detect and mask sensitive information in the following SQL query.
    Mask the following types of sensitive data:
    1. Email addresses (e.g., replace with [masked-email]).
    2. Phone numbers (e.g., replace with [masked-phone]).
    3. Credit card numbers (e.g., replace with [masked-credit-card]).
    4. Social Security Numbers (e.g., replace with [masked-ssn]).

    Only return the updated SQL query with no additional comments or explanations.

    SQL Query:
    {sql_query}
  used_by: tasks.sql_data_masker.SQLDataMasker
  inputs: [sql_query]
  version: 1.0
  description: Masks sensitive data in SQL queries.

data_masker.detect_sensitive_data:
  inline: |
    You are a data privacy expert. Analyze the following SQL query and detect any sensitive data it contains.
    Identify the following types of sensitive data:
    1. Email addresses.
    2. Phone numbers.
    3. Credit card numbers.
    4. Social Security Numbers.

    Provide a list of detected sensitive data along with their types.

    SQL Query:
    {sql_query}
  used_by: tasks.sql_data_masker.SQLDataMasker
  inputs: [sql_query]
  version: 1.0
  description: Detects sensitive data in SQL queries.

# Dynamic SQL Detection Prompts
dynamic_sql.detector:
  inline: |
    You are a database expert. Analyze the following SQL code and identify any dynamically
    generated SQL patterns. Specifically, look for concatenation of strings, dynamic table
    or column names, and the use of EXEC or sp_executesql. Provide a short report describing
    the detected patterns.

    SQL Code:
    {sql_code}
  used_by: utils.dynamic_sql_detector.DynamicSQLDetector
  inputs: [sql_code]
  version: 1.0
  description: Detects dynamic SQL patterns in SQL code.

dynamic_sql.risks_and_optimization:
  inline: |
    You are a database security and optimization expert. Analyze the following SQL code
    for risks and optimization opportunities. Specifically:
    1. Identify any SQL injection vulnerabilities.
    2. Suggest safer alternatives (e.g., parameterized queries).
    3. Recommend optimizations to improve performance.

    SQL Code:
    {sql_code}
  used_by: utils.dynamic_sql_detector.DynamicSQLDetector
  inputs: [sql_code]
  version: 1.0
  description: Analyzes risks and optimization opportunities in dynamic SQL code.